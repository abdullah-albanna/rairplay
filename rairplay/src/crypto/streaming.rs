use aes::cipher::{block_padding::NoPadding, BlockDecryptMut, KeyIvInit as _, StreamCipher as _};
use chacha20poly1305::{AeadInPlace, ChaCha20Poly1305, Key, KeyInit as _, Nonce, Tag};

use super::{cipher_with_hashed_aes_iv, AesCbc128, AesCtr128BE, AesIv128, AesKey128};

pub struct AudioBufferedCipher {
    inner: ChaCha20Poly1305,
}

impl AudioBufferedCipher {
    pub const KEY_LEN: usize = 32;
    pub const AAD_LEN: usize = 8;
    pub const TAG_LEN: usize = 16;
    pub const NONCE_LEN: usize = 12;

    pub fn new(key: [u8; Self::KEY_LEN]) -> Self {
        Self {
            inner: ChaCha20Poly1305::new(Key::from_slice(&key)),
        }
    }

    pub fn open_in_place(
        &self,
        nonce: [u8; Self::NONCE_LEN],
        aad: [u8; Self::AAD_LEN],
        tag: [u8; Self::TAG_LEN],
        inout: &mut [u8],
    ) -> Result<(), ()> {
        self.inner
            .decrypt_in_place_detached(
                Nonce::from_slice(&nonce),
                &aad,
                inout,
                Tag::from_slice(&tag),
            )
            .map_err(|_| ())
    }
}

pub struct AudioRealtimeCipher {
    aescbc: AesCbc128,
}

impl AudioRealtimeCipher {
    pub fn new(key: AesKey128, eiv: AesIv128) -> Self {
        Self {
            aescbc: AesCbc128::new(&key.into(), eiv.as_ref().into()),
        }
    }

    pub fn decrypt(&self, buf: &mut [u8]) {
        let encrypted_len = buf.len() - (buf.len() % 16);
        let _ = self
            .aescbc
            .clone()
            .decrypt_padded_mut::<NoPadding>(&mut buf[..encrypted_len]);
    }
}

pub struct VideoCipher {
    aesctr: AesCtr128BE,
    og: [u8; 16],
    next_decrypt_count: usize,
}

impl VideoCipher {
    pub fn new(key: AesKey128, stream_connection_id: u64) -> Self {
        Self {
            aesctr: cipher_with_hashed_aes_iv(
                format!("AirPlayStreamKey{stream_connection_id}"),
                format!("AirPlayStreamIV{stream_connection_id}").as_bytes(),
                key,
            ),
            og: [0; 16],
            next_decrypt_count: 0,
        }
    }

    pub fn decrypt(&mut self, inout: &mut [u8]) {
        let n = self.next_decrypt_count;

        // Step 1: Process leftover bytes from the previous call
        if n > 0 {
            for (i, x) in inout.iter_mut().enumerate().take(n) {
                *x ^= self.og[(16 - n) + i];
            }
        }

        // Step 2: Decrypt full blocks
        let encryptlen = ((inout.len() - n) / 16) * 16;
        self.aesctr.apply_keystream(&mut inout[n..n + encryptlen]);

        // Step 3: Handle remaining partial block
        let restlen = (inout.len() - n) % 16;
        let reststart = inout.len() - restlen;
        self.next_decrypt_count = 0;

        if restlen > 0 {
            self.og.fill(0);
            self.og[..restlen].copy_from_slice(&inout[reststart..]);
            self.aesctr.apply_keystream(&mut self.og);
            inout[reststart..].copy_from_slice(&self.og[..restlen]);
            self.next_decrypt_count = 16 - restlen;
        }
    }
}

#[cfg(test)]
mod tests {
    use super::VideoCipher;

    #[test]
    fn test_video_decipher() {
        const OUTPUT: &[u8] = &[
            252, 45, 214, 146, 245, 125, 238, 147, 162, 54, 219, 162, 215, 181, 231, 142, 202, 124,
            152, 139, 195, 175, 19, 108, 149, 43, 166, 38, 29, 236, 76, 1, 221, 169, 129, 31, 249,
            186, 235, 178, 31, 147, 65, 174, 26, 110, 49, 83, 95, 130, 95, 80, 205, 14, 81, 39,
            249, 250, 64, 83, 73, 67, 102, 105, 225, 113, 33, 4, 87, 198, 82, 170, 201, 60, 190,
            25, 134, 201, 153, 225, 74, 177, 26, 229, 235, 5, 128, 120, 84, 244, 35, 102, 167, 77,
            83, 167, 251, 215, 39, 1, 208, 49, 107, 42, 48, 25, 153, 199, 115, 235, 250, 100, 99,
            212, 230, 66, 70, 191, 121, 120, 39, 103, 96, 182, 183, 158, 222, 217, 46, 78, 0, 16,
            214, 93, 39, 48, 145, 68, 92, 10, 168, 232, 57, 43, 33, 125, 115, 71, 162, 94, 159, 53,
            118, 196, 144, 54, 25, 251, 50, 9, 70, 218, 45, 199, 81, 153, 101, 17, 16, 72, 117,
            133, 120, 64, 82, 198, 71, 153, 239, 159, 3, 81, 37, 216, 59, 61, 131, 66, 120, 184,
            182, 143, 66, 135, 206, 183, 194, 229, 57, 18, 185, 84, 236, 64, 245, 193, 180, 66,
            145, 76, 205, 253, 18, 42, 209, 106, 2, 77, 213, 119, 126, 148, 70, 33, 93, 207, 105,
            49, 252, 45, 162, 74, 77, 74, 43, 114, 245, 34, 104, 84, 42, 107, 97, 206, 183, 175,
            133, 159, 86, 169, 213, 113, 12, 49, 7, 60, 55, 149, 202, 248, 175, 140, 228, 123, 59,
            78, 254, 221, 218, 103, 40, 251, 216, 6, 15, 54, 133, 76, 82, 233, 89, 144, 154, 60,
            39, 46, 161, 39, 65, 151, 209, 82, 137, 42, 119, 117, 37, 146, 117, 49, 206, 214, 154,
            61, 33, 161, 156, 118, 203, 16, 133, 161, 158, 20, 155, 1, 187, 131, 178, 165, 2, 235,
            158, 160, 66, 14, 171, 122, 14, 237, 121, 88, 39, 215, 48, 144, 199, 101, 85, 133, 208,
            244, 136, 171, 7, 123, 58, 236, 194, 115, 133, 109, 236, 69, 242, 205, 242, 197, 168,
            54, 101, 150, 62, 112, 193, 143, 192, 66, 173, 241, 196, 171, 72, 243, 89, 109, 46,
            212, 138, 227, 44, 50, 13, 173, 96, 180, 69, 45, 33, 28, 176, 7, 158, 151, 69, 101, 24,
            43, 115, 33, 113, 245, 57, 181, 228, 179, 123, 115, 228, 253, 82, 202, 93, 244, 3, 197,
            190, 5, 127, 89, 81, 25, 59, 162, 45, 253, 245, 94, 9, 166, 119, 240, 253, 232, 110,
            83, 193, 169, 73, 82, 75, 47, 222, 29, 162, 166, 178, 234, 161, 195, 63, 220, 41, 4,
            228, 82, 254, 175, 116, 167, 80, 200, 79, 40, 128, 132, 43, 158, 60, 115, 240, 143,
            128, 206, 72, 184, 250, 26, 26, 45, 201, 7, 62, 86, 79, 146, 65, 180, 163, 165, 87, 45,
            217, 76, 12, 78, 194, 43, 129, 36, 70, 151, 252, 20, 237, 226, 162, 205, 208, 221, 75,
            167, 201, 248, 235, 59, 68, 160, 134, 153, 14, 14, 181, 5, 90, 42, 254, 197, 232, 32,
            63, 215, 105, 51, 233, 128, 38, 19, 18, 82, 222, 76, 16, 191, 228, 72, 165, 140, 24,
            234, 31, 230, 8, 161, 201, 223, 28, 159, 161, 66, 174, 45, 117, 168, 96, 85, 4, 200,
            26, 8, 55, 81, 194, 6, 171, 213, 217, 53, 114, 210, 16, 143, 37, 177, 241, 219, 12, 58,
            30, 165, 18, 45, 61, 99, 251, 190, 157, 33, 108, 61, 84, 1, 138, 57, 47, 236, 116, 236,
            48, 54, 52, 69, 4, 60, 208, 208, 23, 161, 115, 88, 134, 8, 121, 126, 62, 126, 94, 19,
            18, 160, 242, 149, 72, 148, 50, 78, 180, 173, 19, 25, 130, 52, 188, 107, 42, 230, 35,
            143, 46, 145, 113, 161, 183, 98, 114, 73, 93, 47, 220, 77, 221, 147, 198, 187, 235,
            175, 44, 104, 45, 13, 150, 246, 208, 87, 39, 119, 234, 18, 105, 135, 226, 63, 102, 169,
            111, 31, 244, 216, 122, 221, 75, 234, 242, 102, 209, 109, 7, 164, 109, 61, 21, 153,
            104, 176, 98, 213, 225, 233, 139, 204, 217, 246, 248, 173, 52, 225, 187, 235, 155, 225,
            221, 90, 92, 67, 225, 140, 89, 145, 238, 198, 27, 219, 182, 52, 114, 84, 167, 229, 140,
            66, 151, 128, 213, 201, 27, 217, 136, 223, 194, 56, 18, 100, 179, 138, 65, 194, 199,
            179, 7, 188, 184, 74, 243, 57, 70, 29, 229, 124, 84, 2, 252, 205, 196, 3, 97, 35, 75,
            205, 19, 130, 196, 67, 192, 76, 149, 145, 105, 89, 150, 105, 243, 139, 239, 12, 246,
            52, 158, 212, 94, 118, 74, 49, 240, 89, 149, 212, 96, 101, 144, 194, 158, 180, 112,
            238, 2, 115, 195, 83, 182, 110, 172, 122, 208, 198, 27, 114, 169, 208, 52, 184, 96, 33,
            28, 54, 218, 200, 206, 25, 241, 209, 98, 203, 174, 57, 232, 232, 191, 96, 140, 239,
            255, 104, 239, 2, 7, 83, 46, 213, 246, 31, 164, 179, 64, 99, 153, 8, 189, 205, 232,
            123, 49, 138, 116, 123, 141, 61, 76, 5, 143, 229, 242, 15, 134, 171, 71, 104, 184, 55,
            71, 44, 121, 251, 35, 65, 170, 72, 105, 105, 199, 126, 56, 218, 164, 226, 249, 82, 162,
            57, 192, 60, 212, 125, 193, 0, 178, 126, 234, 139, 127, 234, 119, 190, 248, 69, 140,
            35, 128, 142, 11, 187, 219, 89, 89, 93, 11, 44, 10, 68, 48, 186, 188, 43, 32, 115, 222,
            78, 175, 157, 153, 87, 83, 6, 25, 120, 74, 59, 81, 243, 151, 34, 17, 110, 169, 120,
            232, 181, 217, 85, 216, 157, 214, 58, 121, 57, 219, 120, 123, 209, 124, 227, 192, 216,
            96, 35, 136, 63, 214, 107, 202, 26, 107, 251, 181, 80, 60, 102, 203, 142, 137, 149,
            185, 193, 230, 49, 46, 84, 55, 47, 250, 185, 134, 150, 200, 126, 84, 206, 118, 213,
            244, 147, 183, 57, 16, 194, 217,
        ];

        let mut input = (0..1025usize).map(|x| (x % 255) as u8).collect::<Vec<_>>();
        let mut cipher = VideoCipher::new([1; 16], 1000);

        cipher.decrypt(&mut input);

        assert_eq!(input, OUTPUT);
    }
}
